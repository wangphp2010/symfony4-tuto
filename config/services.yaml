# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
# 中文文档 http://symfonychina.com/doc/current/doctrine/dbal.html

# %kernel.project_dir% 指项目根目录 %kernel.project_dir% 指在parameters定义过的参数名 见 http://www.newlifeclan.com/symfony/archives/491
# kernel.project_dir 是在这里定义的: https://github.com/symfony/symfony/blob/4.3/src/Symfony/Component/HttpKernel/Kernel.php

parameters:
    locale: 'fr'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # 这三句可以不用写 因为symfony4中 twig会自动加载
#    App\Controller\HomeController:
#        tags: ['controller.service_arguments']
#        arguments:
#            $twig: "@twig"






    # 自定义服务 用来监听图片删除和更新
    App\Listener\ImageCacheSubscriber:
        tags: 
        - { name: doctrine.event_subscriber }
    

        











    
    # use Twig 相当于\vendor\twig\cache-extension\lib\Twig 
    # \vendor\twig\cache-extension\lib\Twig\CacheExtension
    # https://github.com/twigphp/twig-cache-extension

    #载入缓存所需
    # 下面几句相当于在php文件里写了 

    #use Psr\Cache\CacheItemPoolInterface ; 或 use Cache\Adapter\Apcu\ApcuCachePool;需要安装composer require cache/apcu-adapter
    #use Twig\CacheExtension\CacheProvider\PsrCacheAdapter;
     
    #use Twig\CacheExtension\CacheStrategy\LifetimeCacheStrategy;
    
    #use Twig\CacheExtension\Extension as CacheExtension;
    

    #$psrCacheAdapter  = new PsrCacheAdapter(new CacheItemPoolInterface());
    
    #$lifetimeCacheStrategy  = new LifetimeCacheStrategy($psrCacheAdapter);
    
    #$cacheExtension = new CacheExtension($lifetimeCacheStrategy);
    #$twig->addExtension($cacheExtension);


    # 因为用 php bin/console debug:container Cache 查看发现 CacheItemPoolInterface已经加载 所以这句话可以不用写
    #Twig\CacheExtension\CacheProvider\PsrCacheAdapter:
        #class: Psr\Cache\CacheItemPoolInterface

    # 查看LifetimeCacheStrategy.php, 构造器需要CacheProviderInterface 而上面需要的是PsrCacheAdapter ->  $lifetimeCacheStrategy  = new LifetimeCacheStrategy($psrCacheAdapter);
    # PsrCacheAdapter 当成 CacheProviderInterface 引入
    Twig\CacheExtension\CacheProviderInterface:   
        class: Twig\CacheExtension\CacheProvider\PsrCacheAdapter   

    # 查看 Extension.php,构造器需要 CacheStrategyInterface 而上面需要的是LifetimeCacheStrategy -> $cacheExtension = new CacheExtension($lifetimeCacheStrategy);
    # 因此把LifetimeCacheStrategy当成CacheStrategyInterface 引入
    Twig\CacheExtension\CacheStrategyInterface:  
        class: Twig\CacheExtension\CacheStrategy\LifetimeCacheStrategy
    Twig\CacheExtension\Extension:    
        tags:
        - { name: twig.extension }

    