

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
vscode emmet支持twig
文件---首选项---设置---扩展---emmet
{
   
  "emmet.includeLanguages": {
    "html.twig": "html",
    "twig": "html"
  },
    "emmet.showSuggestionsAsSnippets": true,
   
    "emmet.optimizeStylesheetParsing": false,
    "emmet.syntaxProfiles": {
      "html.twig": "html",
      "twig": "html"
    },
    "emmet.triggerExpansionOnTab": true
  
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
指令 教程


  public function index( ):Response
    {
       
        #$this->findData() ;

        return $this->render(
            "property/biens.html.twig",
            [
                'current_menu'=>'properties', # 给视图文件传值 令 变量 current_menu = properties
            ]
        ); # 需要引用 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController; 并继承 extends AbstractController

    }
	
	<<<<<<<<
	# 需要引用 use Symfony\Component\Routing\Annotation\Route ;

	 /**
     * @Route("/login" , name="login")
     */
	
	<<<<<<<<	
	#加密密码 
	 use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
	 use App\Entity\User;
	private $encoder ;

    /**
     * @var UserPasswordEncoderInterface
     */
    private $encoder ;

    public function __construct( UserPasswordEncoderInterface $encoder)
    {
        $this->encoder = $encoder ;
    }
	 $user = new User();
	 $this->encoder->encodePassword(  $user , 'demo'); #加密
	 <<<<<<<<
	 卸载组件 (没测试过 只是在网上找的教程 )
	 composer remove packageauthor/packagename --update-with-dependencies
	 
	 
	<<<<<<<<<<<<<
	返回老的数据库结构
	php bin/console doctrine:migrations:status #获得migrations 状态
	找previous Version: 2019-05-31 02:43:08 (20190531024308) 后面括号的版本号
	输入 php bin/console doctrine:migrations:migrate 20190531024308 会让数据库返回这个状态 并在src/migrations 文件加下 删除对应的版本文件
	然后再一次
		准备 php bin/console make:migration
		查看新生成src/migrations 版本文件是否正确
		在 加载到数据库 php bin/console doctrine:migrations:migrate

	 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	
	


先安装composer 确定环境变量PATH 里有 C:/composer
在git 的 git CMD 输入
	composer create-project symfony/website-skeleton MaSuperAgence
	下载symfony4 所需
	

What's next?


  * Run your application:
    1. Go to the project directory
    2. Create your code repository with the git init command
    3. Download the Symfony CLI at https://symfony.com/download to install a dev
elopment web server,
       or run composer require server --dev for a minimalist one

  * Read the documentation at https://symfony.com/doc


 Database Configuration


  * Modify your DATABASE_URL config in .env

  * Configure the driver (mysql) and
    server_version (5.7) in config/packages/doctrine.yaml


 How to test?


  * Write test cases in the tests/ folder
  * Run php bin/phpunit
  
  教程地址
  https://www.youtube.com/watch?v=9gFhvApgM20&list=PLjwdMgw5TTLX7wmorGgfrqI9TcA8nMb29&index=7
  
  一般操作的文件夹是 
  config  操作routes.yaml
  src  操作php代码
  templates 操作前端

配置mysql所需用户名和密码
	根目录 .env文件
		DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name 改为
		DATABASE_URL=mysql://root:wxz@127.0.0.1:3306/masuperagence
	修改配置文件  config--packages--doctrine.yaml  
	
启动symfony服务器 
	先cd 到项目所在文件夹
	php -S 127.0.0.1:8000 -t public
	Press Ctrl-C to quit. 按ctrl-c 关闭symfony服务器

指令	
	php bin/console 可获取各种指令语法
	php bin/console server:run	获取指令后 应该这样输入
	
找出route bug	 debug
	php bin/console debug:router
	
	php bin/console debug:container 查找要使用某容器需要引入的命名空间 比如要使用twig 要应用Twig\Environment
	php bin/console debug:autowiring 查看那些服务会自动加载的 不需要在services.yaml定义的
	
	
	
改变处理配置route
		config/routes.yaml
			方法
				home:	#名称
				path:/  #路径
				controller: App\Controller\HomeController::index # App\Controller\  命名空间(namespace)  HomeController类 index函数
				
				
改变处理配置Controller
		src/Controller\
			新建文件 HomeController.php
					代码
					namespace App\Controller;
					
					use Symfony\Component\HttpFoundation\Response
					
					class HomeController{ 
					#类名要与文件名相同


						public function index():Response # 要使用 Response 要先引入use Symfony\Component\HttpFoundation\Response
						{

						}
					}
					
					
直接在controller里写routes 不必去config/routes.yaml定义
有时候需要 先运行 这个语句才可以用 composer require annotations 
 	
	use Symfony\Component\Routing\Annotation\Route; #直接用@Route 需要应用这个

	class LuckyController
	{
	    /**
		 * @Route("/biens",name="property.index") # name="property.index" # route 后面一定要用双引号 对应 html.twig格式文件中的链接: {{ path('property.index') }}或config/routes.yaml 中的 property.index:
		 * @return Response
		 */
		public function number()
		{
			// this looks exactly the same
		}
	}
	



使用twig时			
	public function __construct($twig)
    {
         $this->twig = $twig ; 
    }
    
    public function home3()
    {
         return new Response( $this->twig->render('pages/home.html.twig'));
    }
	再修改services.yaml 
	services.yaml #定义环境参数	
	
	# 这三句可以不用写 因为symfony4中 twig会自动加载
	App\Controller\HomeController: #最前面一定要空一个tab
		tags: ['controller.service_arguments']
        arguments:
            $twig: "@twig" # @twig 载入twig服务
			
			
			

建立mysql数据库 步骤 
	1. php bin/console doctrine:database:create 会根据 根目录 .env文件 建立  DATABASE_URL=mysql://root:wxz@127.0.0.1:3306/masuperagence 定义的数据库名:masuperagence
	如果出现 PDOConnection.php   could not find driver 需要在php.ini 加载extension=php_pdo_mysql.dll
	
 	2. php bin/console make:entity #Creates or updates a Doctrine entity class, and optionally an API Platform resource
		会要求输入 class name of the entity 
		自己取名 如: Property
		symfony 会 创建文件	
					created: src/Entity/Property.php
					created: src/Repository/PropertyRepository.php
		接下来 会要求输入表的字段 例如 (自己取名就行) 名称    		类型(输入? 会提示各种类型)     长度   是否空
											  title    		string  					   255     not
											  description    text   				       255     yes
											  
		最后问是否要增加新的例 , 如果不增加新例,按回车结束
		刚刚这些值 会写入Property.php 然后会把这些值写入数据库中的表:Property
		
		接下来输入 php bin/console make:migration 如果提示utf8mb4错误 修改文件  config--packages--doctrine.yaml 
			--建立准备文件 src\Migrations\Version20190528215650.php #里面有在数据库建立表:Property的语法
			--写入数据库 建立 表 migration_versions
		
		检查src\Migrations\Version20190528215650.php 如果建立表:Property的语法 没有问题 
		把表结构Property写入数据库 php bin/console doctrine:migrations:migrate 同时 会把表版本号Version20190528215650 写入表 migration_versions
		
修改表		
	增加结构 表Property
		php bin/console make:entity Property
	增加完后 php bin/console make:migration	
	也可以直接修改Property.php 
		改完后 删除最后一个src\Migrations\Version20190528215650.php
		再一次 php bin/console make:migration
	最后 将结构更新写入数据库 	php bin/console doctrine:migrations:migrate
				
				
				
				
				
				
 ## 插入数据库 

        # 需要先调用 //src/entity/property.php  方法use App\Entity\Property ; 
        $property = new Property() ;

        # 设置数据
        $property
            ->setTitle("Mon premier bien")
            ->setPrice(2000000)
            ->setRooms(4)
            ->setBedrooms(3)
            ->setDescription('Une petit description')
            ->setSurface(66)
            ->setFloor(4)
            ->setHeat(1)
            ->setCity('Montpellier')
            ->setAddress("15 boulevard Gambetta")
            ->setPostalCode('34000') ;
			
        # 准备函数然后 插入数据库
        $em =  $this->getDoctrine()->getManager();
        $em->persist($property) ;
        $em->flush() ; 
				

## 建立form 
	php bin/console make:form 
	接下来会要求填入
		1 类型 如 PropertyType 最好与表名相同 ,
		2 entity的名字 ru Property 与表名相同
	会在src/form下创建文件PropertyType.php 里面会根据src/entiry/property.php 里面的值建立
	

form 视图文件C:\htdocs\symfony\MaSuperAgence\vendor\symfony\twig-bridge\Resources\views\Form
修改文件 : config/packages/twig.yaml
		增加form_themes: 这里一定要空格['bootstrap_4_layout.html.twig']
		
#安全策略 管理安全的yaml 登录等等 
	config/packages/security.yaml
	--> 
		修改
		为
					
		providers:
			in_memory: 
				memory: 
					users:
						demo:
							password: demo
							roles: ROLE_ADMIN
		
		
		main:
            http_basic: true  
		access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }	增加这行: route:amdin , 只允许 ROLE_ADMIN 
		
		encoders:
			Symfony\Component\Security\Core\User\User: plaintext # 加密方式 plaintext: 不加密密码 ps:使用空格进行缩进

	#退出刚才的登录
		http://log:out@localhost:8000/admin
		
	#管理登录页面
		创建(数据库表User)entity User
			php bin/console make:entity User #(如果要增加表的字段 在输入一次php bin/console make:entity User 具体方法查看 "修改表 199行" )
			
			#会建立文件
				src/Entiry/User.php
				src/Repository/UserRepository.php
			接下来输入表需要的字段 如user username ps time email 等	
			
			php bin/console make:migration # 准备载入到数据库中会建立版本文件src/migrations/version数字.php
			php bin/console doctrine:migrations:migrate # 在数据库中建立表user
		
		修改安全策略以便其可以通过数据库管理
			//config/packages/security.yaml	
			
			providers:
				from_database:
					entity:
						class: App\Entiry\User
						property: username #通过username管理
				#加密方式
				encoders:
 				App\Entity\User:
					algorithm: bcrypt # algorithm:算法 即加密方法
					cost: 12 #加密强度 12为最强		
		
		修改src/Entiry/User.php
			
			增加use Symfony\Component\Security\Core\User\UserInterface;
			修改class User 为 class User implements UserInterface,\Serializable
				
			增加
				/**
				 *  Returns the roles granted to the user.
				 *  
				 *         public function getRoles()
				 *          {
				 *              return array("ROLE_USER");
				 *          }
				 *  Alternatively, the roles might be stored on a ``roles`` property,
				 *  and populated in any number of different ways when the user object
				 *  is created
				 * 
				 *  @return (Role|string)[] the user roles
				 */
				public function getRoles()
				{
					// TODO: Implement getRoles() method.
					return ['ROLE_ADMIN'];
				}

				/**
				 * Return the salt that was originally used to encode the password
				 * this can return null if the password was not encoded using a salt.
				 * 
				 * @return string:null The salt
				 */
				public function getSalt()
				{
					// TODO: Implement getSalt() method
					return null ; 
				}
				/**
				 * Removes senstive data from the user.
				 * 
				 * This is important if , at any given point , sensitive information like
				 * the plain-text password is stored on this object.
				 */
				public function eraseCredentials()
				{
					//TODO: Implement eraseCredentials() method 
					 
				}
				/**
				 * String representation of object
				 * @return string the string representation of the object or null
				 * 
				 */

				public function serialize()
				{
					return serialize([
						$this->id , 
						$this->username,
						$this->password,
						
					]);
					
				}
				/**
				 * Constructs the object
				 * @link https://php.net/manual/en/serializable.unserrialize.php
				 * @param string @serrialized <p>
				 * The string representation of the object
				 * <p>
				 * @return void
				  */
				public function unserialize($serialized)
				{
					list(
						$this->id , 
						$this->username,
						$this->password
					) = userialize($serialized,['allowed_class' => false ]);
				}
				
				
				
				
# 查看安全策略参数
	php bin/console config:dump-reference security
	
	如果出现 La requête d'authentification n'a pas pu être executée à cause d'un problème système 错误 在security.yaml找找看
	
# 下载 安装	fixtures (用来加载测试用的数据) 因此只在开发程序时使用 所以加 --dev
	composer require  orm-fixtures --dev
	
	建立 Userfixtures 
		php bin/console make:fixtures
		接下来输入 Userfixtures 可以自己取名 会创建文件src/DataFixtures/UserFixtures.php
		修改src/DataFixtures/UserFixtures.php
		
		运行 php bin/console doctrine:fixtures:load 载入设置好的fixtures
			会提问是否清空数据库 当然N
		或者运行 php bin/console doctrine:fixtures:load --append 只在数据库增加数据
	
	
	建立 Propertyfixtures
		php bin/console make:fixtures
		输入Propertyfixtures
		修改src/DataFixtures/Propertyfixtures.php
			安装 faker : composer require fzaninotto/faker(用来产生各做虚拟数据 这样就不需要自己一个个写了)
		修改好src/DataFixtures/Propertyfixtures.php后	
		运行 php bin/console doctrine:fixtures:load 会清空数据库表Property并插入新的数据


# 建立分页
	安装https://github.com/KnpLabs/KnpPaginatorBundle
	指令 composer require knplabs/knp-paginator-bundle
	创建文件 config/knp_paginator.yaml


		
	
				
在src/entity 创建 propertySearch.php
	修改propertySearch.php
	php bin/console make:form 
	输入 PropertySearchType
	输入 \App\Entity\PropertySearch
	修改src/from/PropertySearchType.php
	
	修改 src/Controller/PropertyController.php
	修改 templates\property/index.html.twig
	修改 src/Repository/PropertyRepository 
	
	修改src/entiry/propertySearch.php 
		增加use Symfony\Component\Validator\Constraints as Assert ; # 检验输入的数值是否有效
		@Assert\Range(min=10,max=400) # 这个范围是10-400 否则无效
	修改 templates\property/index.html.twig
		修改	<div class="form-row "  >
			--> <div class="form-row align-items-end "  >
		把<button class="btn btn-primary">Rechercher</button> 
		放到这里 
			像这样<div class="col">
                    <div class="form-group">
                        <button class="btn btn-primary">Rechercher</button>
                    </div>

                </div>
		这样,就算弹出错误信息,表的input还是会保持在同一行
		

9/16 Gestion des options
	php bin/console make:entity
		> Option # option表
		> name( string  255 no null )  #name 字段
		> properties (relation Property ManyToMany yes options ) # 会建立表option_property 及外键option_id连接 表option id 外键property_id连接表Property id 
	php bin/console make:migration 	
	php bin/console doctrine:migrations:migrate
	
	php bin/console make:crud Option 
		
		#为option建立crud 这个指令会创建一系列相关文件 以免去了手动创建
		# created: src/Controller/OptionController.php
		# created: src/Form/OptionType.php
		# created: templates/option/_delete_form.html.twig
		# created: templates/option/_form.html.twig
		# created: templates/option/edit.html.twig
		# created: templates/option/index.html.twig
		# created: templates/option/new.html.twig
		# created: templates/option/show.html.twig
		 修改 src/entity/option.php
			加 @ORM\Entity(repositoryClass="App\Repository\OptionRepository")
   				@Orm\Table(name="`Option`") # 要加这句否则 mysql会有字符冲突Option
		 
		
		修改文件//src/form/optiontype.php
			注释掉 ->add('properties') 不然会报错
	把文件//src/controller/OptionController.php 放到 //src/controller/Admin/ 并改名为 AminOptionController.php 
		修改类名与文件名相同 里面的html.twig文件 都写 admin/
	在templete/admin下建立option文件夹并复制 templete/admin/property下的.twig文件到templete/admin/option 然后修改里面的文字
	
	
	修改 src/Form/PropertyType.php 
		增加  ->add('options',EntityType::class,[
               'class'=>Option::class,
               'choice_label'=>'name',
               'multiple'=> true ,#use App\Entity\Option;

           ]) 
 
		
	很重要	
	# /**
     * @ORM\ManyToMany(targetEntity="App\Entity\Option", inversedBy="properties") #所有者用inversedBy 非所有者用mappedBy 结果就是查数据时会 找表 所有者_非所有者 如 table property_option 
     */
    private $options;

	  /**
		 * @ORM\ManyToMany(targetEntity="App\Entity\Property", mappedBy="options") #所有者用inversedBy 非所有者用mappedBy 结果就是查数据时会 找表 所有者_非所有者 如 table property_option
		 */
		private $properties;	
		
		
		



		
		
				
				
				
				
				
				
				
				
				
				
			
	